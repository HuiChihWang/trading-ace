// Code generated by mockery. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUniSwapService is an autogenerated mock type for the UniSwapService type
type MockUniSwapService struct {
	mock.Mock
}

type MockUniSwapService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUniSwapService) EXPECT() *MockUniSwapService_Expecter {
	return &MockUniSwapService_Expecter{mock: &_m.Mock}
}

// ProcessSharedPool provides a mock function with given fields: from, to
func (_m *MockUniSwapService) ProcessSharedPool(from time.Time, to time.Time) error {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSharedPool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) error); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUniSwapService_ProcessSharedPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSharedPool'
type MockUniSwapService_ProcessSharedPool_Call struct {
	*mock.Call
}

// ProcessSharedPool is a helper method to define mock.On call
//   - from time.Time
//   - to time.Time
func (_e *MockUniSwapService_Expecter) ProcessSharedPool(from interface{}, to interface{}) *MockUniSwapService_ProcessSharedPool_Call {
	return &MockUniSwapService_ProcessSharedPool_Call{Call: _e.mock.On("ProcessSharedPool", from, to)}
}

func (_c *MockUniSwapService_ProcessSharedPool_Call) Run(run func(from time.Time, to time.Time)) *MockUniSwapService_ProcessSharedPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *MockUniSwapService_ProcessSharedPool_Call) Return(_a0 error) *MockUniSwapService_ProcessSharedPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniSwapService_ProcessSharedPool_Call) RunAndReturn(run func(time.Time, time.Time) error) *MockUniSwapService_ProcessSharedPool_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessUniSwapTransaction provides a mock function with given fields: senderID, swapAmount
func (_m *MockUniSwapService) ProcessUniSwapTransaction(senderID string, swapAmount float64) error {
	ret := _m.Called(senderID, swapAmount)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUniSwapTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(senderID, swapAmount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUniSwapService_ProcessUniSwapTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessUniSwapTransaction'
type MockUniSwapService_ProcessUniSwapTransaction_Call struct {
	*mock.Call
}

// ProcessUniSwapTransaction is a helper method to define mock.On call
//   - senderID string
//   - swapAmount float64
func (_e *MockUniSwapService_Expecter) ProcessUniSwapTransaction(senderID interface{}, swapAmount interface{}) *MockUniSwapService_ProcessUniSwapTransaction_Call {
	return &MockUniSwapService_ProcessUniSwapTransaction_Call{Call: _e.mock.On("ProcessUniSwapTransaction", senderID, swapAmount)}
}

func (_c *MockUniSwapService_ProcessUniSwapTransaction_Call) Run(run func(senderID string, swapAmount float64)) *MockUniSwapService_ProcessUniSwapTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *MockUniSwapService_ProcessUniSwapTransaction_Call) Return(_a0 error) *MockUniSwapService_ProcessUniSwapTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUniSwapService_ProcessUniSwapTransaction_Call) RunAndReturn(run func(string, float64) error) *MockUniSwapService_ProcessUniSwapTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUniSwapService creates a new instance of MockUniSwapService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUniSwapService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUniSwapService {
	mock := &MockUniSwapService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
