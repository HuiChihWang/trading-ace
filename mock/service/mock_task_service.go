// Code generated by mockery. DO NOT EDIT.

package service

import (
	model "trading-ace/src/model"

	mock "github.com/stretchr/testify/mock"

	repository "trading-ace/src/repository"
)

// MockTaskService is an autogenerated mock type for the TaskService type
type MockTaskService struct {
	mock.Mock
}

type MockTaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskService) EXPECT() *MockTaskService_Expecter {
	return &MockTaskService_Expecter{mock: &_m.Mock}
}

// CompleteTask provides a mock function with given fields: taskID
func (_m *MockTaskService) CompleteTask(taskID int) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskService_CompleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteTask'
type MockTaskService_CompleteTask_Call struct {
	*mock.Call
}

// CompleteTask is a helper method to define mock.On call
//   - taskID int
func (_e *MockTaskService_Expecter) CompleteTask(taskID interface{}) *MockTaskService_CompleteTask_Call {
	return &MockTaskService_CompleteTask_Call{Call: _e.mock.On("CompleteTask", taskID)}
}

func (_c *MockTaskService_CompleteTask_Call) Run(run func(taskID int)) *MockTaskService_CompleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTaskService_CompleteTask_Call) Return(_a0 error) *MockTaskService_CompleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskService_CompleteTask_Call) RunAndReturn(run func(int) error) *MockTaskService_CompleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function with given fields: userId, taskType, swapAmount
func (_m *MockTaskService) CreateTask(userId string, taskType model.TaskType, swapAmount float64) (*model.Task, error) {
	ret := _m.Called(userId, taskType, swapAmount)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.TaskType, float64) (*model.Task, error)); ok {
		return rf(userId, taskType, swapAmount)
	}
	if rf, ok := ret.Get(0).(func(string, model.TaskType, float64) *model.Task); ok {
		r0 = rf(userId, taskType, swapAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.TaskType, float64) error); ok {
		r1 = rf(userId, taskType, swapAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockTaskService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - userId string
//   - taskType model.TaskType
//   - swapAmount float64
func (_e *MockTaskService_Expecter) CreateTask(userId interface{}, taskType interface{}, swapAmount interface{}) *MockTaskService_CreateTask_Call {
	return &MockTaskService_CreateTask_Call{Call: _e.mock.On("CreateTask", userId, taskType, swapAmount)}
}

func (_c *MockTaskService_CreateTask_Call) Run(run func(userId string, taskType model.TaskType, swapAmount float64)) *MockTaskService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.TaskType), args[2].(float64))
	})
	return _c
}

func (_c *MockTaskService_CreateTask_Call) Return(_a0 *model.Task, _a1 error) *MockTaskService_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskService_CreateTask_Call) RunAndReturn(run func(string, model.TaskType, float64) (*model.Task, error)) *MockTaskService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTasks provides a mock function with given fields: condition
func (_m *MockTaskService) SearchTasks(condition *repository.SearchTasksCondition) (*[]*model.Task, error) {
	ret := _m.Called(condition)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 *[]*model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*repository.SearchTasksCondition) (*[]*model.Task, error)); ok {
		return rf(condition)
	}
	if rf, ok := ret.Get(0).(func(*repository.SearchTasksCondition) *[]*model.Task); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*repository.SearchTasksCondition) error); ok {
		r1 = rf(condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskService_SearchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTasks'
type MockTaskService_SearchTasks_Call struct {
	*mock.Call
}

// SearchTasks is a helper method to define mock.On call
//   - condition *repository.SearchTasksCondition
func (_e *MockTaskService_Expecter) SearchTasks(condition interface{}) *MockTaskService_SearchTasks_Call {
	return &MockTaskService_SearchTasks_Call{Call: _e.mock.On("SearchTasks", condition)}
}

func (_c *MockTaskService_SearchTasks_Call) Run(run func(condition *repository.SearchTasksCondition)) *MockTaskService_SearchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.SearchTasksCondition))
	})
	return _c
}

func (_c *MockTaskService_SearchTasks_Call) Return(_a0 *[]*model.Task, _a1 error) *MockTaskService_SearchTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskService_SearchTasks_Call) RunAndReturn(run func(*repository.SearchTasksCondition) (*[]*model.Task, error)) *MockTaskService_SearchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskService creates a new instance of MockTaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskService {
	mock := &MockTaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
