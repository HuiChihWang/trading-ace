// Code generated by mockery. DO NOT EDIT.

package service

import (
	model "trading-ace/src/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRewardService is an autogenerated mock type for the RewardService type
type MockRewardService struct {
	mock.Mock
}

type MockRewardService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRewardService) EXPECT() *MockRewardService_Expecter {
	return &MockRewardService_Expecter{mock: &_m.Mock}
}

// GetRewardHistory provides a mock function with given fields: userID, startTime, duration
func (_m *MockRewardService) GetRewardHistory(userID string, startTime time.Time, duration time.Duration) ([]*model.RewardRecord, error) {
	ret := _m.Called(userID, startTime, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardHistory")
	}

	var r0 []*model.RewardRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Duration) ([]*model.RewardRecord, error)); ok {
		return rf(userID, startTime, duration)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Duration) []*model.RewardRecord); ok {
		r0 = rf(userID, startTime, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RewardRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Duration) error); ok {
		r1 = rf(userID, startTime, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRewardService_GetRewardHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewardHistory'
type MockRewardService_GetRewardHistory_Call struct {
	*mock.Call
}

// GetRewardHistory is a helper method to define mock.On call
//   - userID string
//   - startTime time.Time
//   - duration time.Duration
func (_e *MockRewardService_Expecter) GetRewardHistory(userID interface{}, startTime interface{}, duration interface{}) *MockRewardService_GetRewardHistory_Call {
	return &MockRewardService_GetRewardHistory_Call{Call: _e.mock.On("GetRewardHistory", userID, startTime, duration)}
}

func (_c *MockRewardService_GetRewardHistory_Call) Run(run func(userID string, startTime time.Time, duration time.Duration)) *MockRewardService_GetRewardHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockRewardService_GetRewardHistory_Call) Return(_a0 []*model.RewardRecord, _a1 error) *MockRewardService_GetRewardHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRewardService_GetRewardHistory_Call) RunAndReturn(run func(string, time.Time, time.Duration) ([]*model.RewardRecord, error)) *MockRewardService_GetRewardHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetRewardHistoryByTaskID provides a mock function with given fields: taskID
func (_m *MockRewardService) GetRewardHistoryByTaskID(taskID int) (*model.RewardRecord, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardHistoryByTaskID")
	}

	var r0 *model.RewardRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.RewardRecord, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.RewardRecord); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RewardRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRewardService_GetRewardHistoryByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewardHistoryByTaskID'
type MockRewardService_GetRewardHistoryByTaskID_Call struct {
	*mock.Call
}

// GetRewardHistoryByTaskID is a helper method to define mock.On call
//   - taskID int
func (_e *MockRewardService_Expecter) GetRewardHistoryByTaskID(taskID interface{}) *MockRewardService_GetRewardHistoryByTaskID_Call {
	return &MockRewardService_GetRewardHistoryByTaskID_Call{Call: _e.mock.On("GetRewardHistoryByTaskID", taskID)}
}

func (_c *MockRewardService_GetRewardHistoryByTaskID_Call) Run(run func(taskID int)) *MockRewardService_GetRewardHistoryByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRewardService_GetRewardHistoryByTaskID_Call) Return(_a0 *model.RewardRecord, _a1 error) *MockRewardService_GetRewardHistoryByTaskID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRewardService_GetRewardHistoryByTaskID_Call) RunAndReturn(run func(int) (*model.RewardRecord, error)) *MockRewardService_GetRewardHistoryByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// RewardUser provides a mock function with given fields: userID, TaskID, points
func (_m *MockRewardService) RewardUser(userID string, TaskID int, points float64) error {
	ret := _m.Called(userID, TaskID, points)

	if len(ret) == 0 {
		panic("no return value specified for RewardUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, float64) error); ok {
		r0 = rf(userID, TaskID, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRewardService_RewardUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RewardUser'
type MockRewardService_RewardUser_Call struct {
	*mock.Call
}

// RewardUser is a helper method to define mock.On call
//   - userID string
//   - TaskID int
//   - points float64
func (_e *MockRewardService_Expecter) RewardUser(userID interface{}, TaskID interface{}, points interface{}) *MockRewardService_RewardUser_Call {
	return &MockRewardService_RewardUser_Call{Call: _e.mock.On("RewardUser", userID, TaskID, points)}
}

func (_c *MockRewardService_RewardUser_Call) Run(run func(userID string, TaskID int, points float64)) *MockRewardService_RewardUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(float64))
	})
	return _c
}

func (_c *MockRewardService_RewardUser_Call) Return(_a0 error) *MockRewardService_RewardUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRewardService_RewardUser_Call) RunAndReturn(run func(string, int, float64) error) *MockRewardService_RewardUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRewardService creates a new instance of MockRewardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRewardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRewardService {
	mock := &MockRewardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
