// Code generated by mockery. DO NOT EDIT.

package service

import (
	model "trading-ace/src/model"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: userID
func (_m *MockUserService) CreateUser(userID string) (*model.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - userID string
func (_e *MockUserService_Expecter) CreateUser(userID interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", userID)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(userID string)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(_a0 *model.User, _a1 error) *MockUserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(string) (*model.User, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockUserService) GetUserByID(userID string) (*model.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - userID string
func (_e *MockUserService_Expecter) GetUserByID(userID interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", userID)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(userID string)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(string) (*model.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPoints provides a mock function with given fields: userID, points
func (_m *MockUserService) UpdateUserPoints(userID string, points float64) error {
	ret := _m.Called(userID, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(userID, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_UpdateUserPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPoints'
type MockUserService_UpdateUserPoints_Call struct {
	*mock.Call
}

// UpdateUserPoints is a helper method to define mock.On call
//   - userID string
//   - points float64
func (_e *MockUserService_Expecter) UpdateUserPoints(userID interface{}, points interface{}) *MockUserService_UpdateUserPoints_Call {
	return &MockUserService_UpdateUserPoints_Call{Call: _e.mock.On("UpdateUserPoints", userID, points)}
}

func (_c *MockUserService_UpdateUserPoints_Call) Run(run func(userID string, points float64)) *MockUserService_UpdateUserPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_UpdateUserPoints_Call) Return(_a0 error) *MockUserService_UpdateUserPoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateUserPoints_Call) RunAndReturn(run func(string, float64) error) *MockUserService_UpdateUserPoints_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
