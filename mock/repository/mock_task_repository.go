// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "trading-ace/src/model"

	mock "github.com/stretchr/testify/mock"

	repository "trading-ace/src/repository"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
	mock.Mock
}

type MockTaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskRepository) EXPECT() *MockTaskRepository_Expecter {
	return &MockTaskRepository_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: task
func (_m *MockTaskRepository) CreateTask(task *model.Task) (*model.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Task) (*model.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*model.Task) *model.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockTaskRepository_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - task *model.Task
func (_e *MockTaskRepository_Expecter) CreateTask(task interface{}) *MockTaskRepository_CreateTask_Call {
	return &MockTaskRepository_CreateTask_Call{Call: _e.mock.On("CreateTask", task)}
}

func (_c *MockTaskRepository_CreateTask_Call) Run(run func(task *model.Task)) *MockTaskRepository_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Task))
	})
	return _c
}

func (_c *MockTaskRepository_CreateTask_Call) Return(_a0 *model.Task, _a1 error) *MockTaskRepository_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_CreateTask_Call) RunAndReturn(run func(*model.Task) (*model.Task, error)) *MockTaskRepository_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function with given fields: taskID
func (_m *MockTaskRepository) GetTaskByID(taskID int) (*model.Task, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Task, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockTaskRepository_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - taskID int
func (_e *MockTaskRepository_Expecter) GetTaskByID(taskID interface{}) *MockTaskRepository_GetTaskByID_Call {
	return &MockTaskRepository_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", taskID)}
}

func (_c *MockTaskRepository_GetTaskByID_Call) Run(run func(taskID int)) *MockTaskRepository_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTaskRepository_GetTaskByID_Call) Return(_a0 *model.Task, _a1 error) *MockTaskRepository_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_GetTaskByID_Call) RunAndReturn(run func(int) (*model.Task, error)) *MockTaskRepository_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTasks provides a mock function with given fields: condition
func (_m *MockTaskRepository) SearchTasks(condition *repository.SearchTasksCondition) ([]*model.Task, error) {
	ret := _m.Called(condition)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 []*model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*repository.SearchTasksCondition) ([]*model.Task, error)); ok {
		return rf(condition)
	}
	if rf, ok := ret.Get(0).(func(*repository.SearchTasksCondition) []*model.Task); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*repository.SearchTasksCondition) error); ok {
		r1 = rf(condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_SearchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTasks'
type MockTaskRepository_SearchTasks_Call struct {
	*mock.Call
}

// SearchTasks is a helper method to define mock.On call
//   - condition *repository.SearchTasksCondition
func (_e *MockTaskRepository_Expecter) SearchTasks(condition interface{}) *MockTaskRepository_SearchTasks_Call {
	return &MockTaskRepository_SearchTasks_Call{Call: _e.mock.On("SearchTasks", condition)}
}

func (_c *MockTaskRepository_SearchTasks_Call) Run(run func(condition *repository.SearchTasksCondition)) *MockTaskRepository_SearchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.SearchTasksCondition))
	})
	return _c
}

func (_c *MockTaskRepository_SearchTasks_Call) Return(_a0 []*model.Task, _a1 error) *MockTaskRepository_SearchTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_SearchTasks_Call) RunAndReturn(run func(*repository.SearchTasksCondition) ([]*model.Task, error)) *MockTaskRepository_SearchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: task
func (_m *MockTaskRepository) UpdateTask(task *model.Task) (*model.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Task) (*model.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*model.Task) *model.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskRepository_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockTaskRepository_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - task *model.Task
func (_e *MockTaskRepository_Expecter) UpdateTask(task interface{}) *MockTaskRepository_UpdateTask_Call {
	return &MockTaskRepository_UpdateTask_Call{Call: _e.mock.On("UpdateTask", task)}
}

func (_c *MockTaskRepository_UpdateTask_Call) Run(run func(task *model.Task)) *MockTaskRepository_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Task))
	})
	return _c
}

func (_c *MockTaskRepository_UpdateTask_Call) Return(_a0 *model.Task, _a1 error) *MockTaskRepository_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskRepository_UpdateTask_Call) RunAndReturn(run func(*model.Task) (*model.Task, error)) *MockTaskRepository_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskRepository creates a new instance of MockTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskRepository {
	mock := &MockTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
