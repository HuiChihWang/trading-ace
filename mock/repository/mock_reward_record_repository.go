// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "trading-ace/src/model"

	mock "github.com/stretchr/testify/mock"
)

// MockRewardRecordRepository is an autogenerated mock type for the RewardRecordRepository type
type MockRewardRecordRepository struct {
	mock.Mock
}

type MockRewardRecordRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRewardRecordRepository) EXPECT() *MockRewardRecordRepository_Expecter {
	return &MockRewardRecordRepository_Expecter{mock: &_m.Mock}
}

// CreateRewardRecord provides a mock function with given fields: userID, points, taskID
func (_m *MockRewardRecordRepository) CreateRewardRecord(userID string, points float64, taskID int) (*model.RewardRecord, error) {
	ret := _m.Called(userID, points, taskID)

	if len(ret) == 0 {
		panic("no return value specified for CreateRewardRecord")
	}

	var r0 *model.RewardRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64, int) (*model.RewardRecord, error)); ok {
		return rf(userID, points, taskID)
	}
	if rf, ok := ret.Get(0).(func(string, float64, int) *model.RewardRecord); ok {
		r0 = rf(userID, points, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RewardRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, float64, int) error); ok {
		r1 = rf(userID, points, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRewardRecordRepository_CreateRewardRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRewardRecord'
type MockRewardRecordRepository_CreateRewardRecord_Call struct {
	*mock.Call
}

// CreateRewardRecord is a helper method to define mock.On call
//   - userID string
//   - points float64
//   - taskID int
func (_e *MockRewardRecordRepository_Expecter) CreateRewardRecord(userID interface{}, points interface{}, taskID interface{}) *MockRewardRecordRepository_CreateRewardRecord_Call {
	return &MockRewardRecordRepository_CreateRewardRecord_Call{Call: _e.mock.On("CreateRewardRecord", userID, points, taskID)}
}

func (_c *MockRewardRecordRepository_CreateRewardRecord_Call) Run(run func(userID string, points float64, taskID int)) *MockRewardRecordRepository_CreateRewardRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].(int))
	})
	return _c
}

func (_c *MockRewardRecordRepository_CreateRewardRecord_Call) Return(_a0 *model.RewardRecord, _a1 error) *MockRewardRecordRepository_CreateRewardRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRewardRecordRepository_CreateRewardRecord_Call) RunAndReturn(run func(string, float64, int) (*model.RewardRecord, error)) *MockRewardRecordRepository_CreateRewardRecord_Call {
	_c.Call.Return(run)
	return _c
}

// GetRewardRecordsByUserID provides a mock function with given fields: userID
func (_m *MockRewardRecordRepository) GetRewardRecordsByUserID(userID string) ([]*model.RewardRecord, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardRecordsByUserID")
	}

	var r0 []*model.RewardRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.RewardRecord, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.RewardRecord); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RewardRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRewardRecordRepository_GetRewardRecordsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewardRecordsByUserID'
type MockRewardRecordRepository_GetRewardRecordsByUserID_Call struct {
	*mock.Call
}

// GetRewardRecordsByUserID is a helper method to define mock.On call
//   - userID string
func (_e *MockRewardRecordRepository_Expecter) GetRewardRecordsByUserID(userID interface{}) *MockRewardRecordRepository_GetRewardRecordsByUserID_Call {
	return &MockRewardRecordRepository_GetRewardRecordsByUserID_Call{Call: _e.mock.On("GetRewardRecordsByUserID", userID)}
}

func (_c *MockRewardRecordRepository_GetRewardRecordsByUserID_Call) Run(run func(userID string)) *MockRewardRecordRepository_GetRewardRecordsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRewardRecordRepository_GetRewardRecordsByUserID_Call) Return(_a0 []*model.RewardRecord, _a1 error) *MockRewardRecordRepository_GetRewardRecordsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRewardRecordRepository_GetRewardRecordsByUserID_Call) RunAndReturn(run func(string) ([]*model.RewardRecord, error)) *MockRewardRecordRepository_GetRewardRecordsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRewardRecordRepository creates a new instance of MockRewardRecordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRewardRecordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRewardRecordRepository {
	mock := &MockRewardRecordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
