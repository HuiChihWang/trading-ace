// Code generated by mockery. DO NOT EDIT.

package job

import (
	asynq "github.com/hibiken/asynq"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(_a0 error) *MockClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: task
func (_m *MockClient) Enqueue(task *asynq.Task) (*asynq.TaskInfo, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *asynq.TaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*asynq.Task) (*asynq.TaskInfo, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*asynq.Task) *asynq.TaskInfo); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.TaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*asynq.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockClient_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - task *asynq.Task
func (_e *MockClient_Expecter) Enqueue(task interface{}) *MockClient_Enqueue_Call {
	return &MockClient_Enqueue_Call{Call: _e.mock.On("Enqueue", task)}
}

func (_c *MockClient_Enqueue_Call) Run(run func(task *asynq.Task)) *MockClient_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*asynq.Task))
	})
	return _c
}

func (_c *MockClient_Enqueue_Call) Return(_a0 *asynq.TaskInfo, _a1 error) *MockClient_Enqueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Enqueue_Call) RunAndReturn(run func(*asynq.Task) (*asynq.TaskInfo, error)) *MockClient_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
